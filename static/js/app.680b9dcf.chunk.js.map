{"version":3,"sources":["hooks/useColorScheme.ts","screens/NotFoundScreen.tsx","constants/Colors.ts","utils/printUtils.ts","models/position.ts","api/client.ts","api/utils.ts","hooks/useStorage.ts","hooks/useSettings.ts","api/httpClient.ts","components/Themed.tsx","components/Settings/SettingsGroup.tsx","screens/PortfolioScreen.tsx","api/useApi.ts","screens/SelectAccountScreen.tsx","components/Settings/SettingsItem.tsx","screens/SettingsScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","mapCurrency","currency","printMoney","value","withSign","precision","undefined","isNaN","sign","parts","toFixed","split","fractionalPart","length","Position","portfolioId","item","this","ticker","figi","name","isin","instrumentType","averagePositionPrice","expectedYield","count","balance","average","expected","fixedPnL","lastPrice","lastPriceUpdated","Date","calculatedAverage","calculatedCount","calculatedExpected","previousDayPrice","orders","isFavourite","withCurrency","currencySymbol","priceChange","cost","expectedPercents","baseUrl","http","jsonParseReviver","window","body","signal","url_","options_","JSON","stringify","method","headers","fetch","then","_response","processRegister","response","status","_headers","forEach","v","k","_responseText","parse","result500","throwException","Promise","resolve","brokerAccountId","Error","encodeURIComponent","processBalance","processBalance2","processRemove","processClear","OrdersClient","processOrders","processLimitOrder","processMarketOrder","orderId","processCancel","OperationsClient","from","to","processOperations","PortfolioClient","processPortfolio","processCurrencies","UserClient","processAccounts","MarketClient","processStocks","processBonds","processEtfs","processCurrencies2","depth","processOrderbook","interval","processCandles","processByFigi","processByTicker","ApiException","message","result","isApiException","obj","binder","instance","cls","Object","getOwnPropertyNames","getPrototypeOf","filter","Function","getAllMethods","mtd","bind","fetchWithTimeout","url","options","timeout","race","_","reject","setTimeout","useStorage","storeData","key","a","async","jsonValue","AsyncStorage","setItem","getData","getItem","defaultSettings","useSettings","useState","settings","setSettings","useEffect","data","merged","resetSettings","client","init","authToken","token","Authorization","apiEndpoint","portfolioClient","userClient","useThemeColor","props","colorName","theme","colorFromProps","Colors","lightColor","darkColor","otherProps","SettingsGroup","children","items","React","Children","map","child","index","cloneElement","isFirst","isLast","Array","isArray","group","paddingHorizontal","paddingTop","opacity","marginBottom","textTransform","borderRadius","PortfolioScreen","initial","fetchData","initialLoading","initialRef","useRef","state","setState","firstFetch","loading","setLoading","error","setError","useCallback","current","l","resp","e","finally","fetchMore","handlePromise","resetData","firstFetchDone","setData","useApi","portfolio","account","positionsByType","payload","positions","reduce","push","groups","entries","position","SectionList","sections","keyExtractor","renderItem","separators","TouchableHighlight","onShowUnderlay","highlight","onHideUnderlay","unhighlight","listItem","itemImage","itemImageLetter","slice","itemInfo","printTitle","printQuantity","printAveragePrice","printPrice","itemRight","printCost","printExpected","ItemSeparatorComponent","separator","renderSectionHeader","section","display","flexDirection","width","height","marginLeft","flexGrow","SelectAccountScreen","navigate","useNavigation","accounts","setAccounts","catch","console","log","brokerAccountType","SettingsItem","clone","divider","SettingsScreen","placeholder","textInput","onChangeText","Link","screen","outlineStyle","BottomTab","createBottomTabNavigator","BottomTabNavigator","colorScheme","Navigator","initialRouteName","screenOptions","headerShown","tabBarActiveTintColor","Screen","component","TabPortfolioNavigator","tabBarIcon","TabBarIcon","TabSettingsNavigator","Ionicons","size","TabPortfolioStack","createStackNavigator","headerTitle","TabSettingsStack","prefixes","Linking","config","screens","Root","Portfolio","Settings","NotFound","Navigation","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.680b9dcf.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import { Currency } from '/api/client';\n\n/**\n * Конвертация строкового представления валюты в символ\n * @param {string} currency Валюта (RUB, USD, EUR)\n */\nexport function mapCurrency(currency: Currency | string | undefined) {\n  if (!currency) {\n    return '';\n  }\n  switch (currency) {\n    case 'RUB':\n      return '₽';\n    case 'USD':\n      return '$';\n    case 'EUR':\n      return '€';\n    case 'GBP':\n      return '£';\n    case 'TRY':\n      return '₺';\n    case 'CHF':\n      return '₣';\n    case 'JPY':\n      return '¥';\n    case 'CNY':\n      return '元';\n    default:\n      return currency;\n  }\n}\n\n/**\n * Отображение денежного значения\n * @param {number} value Числовое значение\n * @param {string} currency Валюта\n * @param {boolean} withSign true, если нужно добавить знак + перед положительным значением\n * @param {number} precision Количество знаков после запятой\n */\nexport function printMoney(\n  value: number | undefined,\n  currency: Currency | string = '',\n  withSign: boolean = false,\n  precision: number = 2,\n) {\n  if (value == null || value == undefined || isNaN(value)) {\n    return '';\n  }\n  const sign = withSign && value > 0 ? '+' : '';\n  const parts = value.toFixed(precision).split('.');\n  const fractionalPart = parts.length > 1 ? '.' + parts[1] : '';\n  return `${sign}${parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}${fractionalPart} ${mapCurrency(\n    currency,\n  )}`;\n}\n","// @ts-check\n\nimport { mapCurrency, printMoney } from '/utils/printUtils';\nimport { Currency, InstrumentType, Order, PortfolioPosition } from '/api/client';\n\n/**\n * @class Position\n */\nexport class Position {\n  /** короткий идентификатор */\n  ticker: string;\n\n  /** полное название актива */\n  name: string;\n\n  /** идентификатор FIGI (Financial Instrument Global Identifier) */\n  figi: string;\n\n  /** идентификатор ISIN (International Securities Identification Number) */\n  isin: string;\n\n  /** тип (Stock, Currency, Bond, Etf) */\n  instrumentType: InstrumentType;\n\n  /** валюта (RUB, USD, EUR, GBP, HKD, CHF, JPY, CNY, TRY) */\n  currency?: Currency;\n\n  /** количество */\n  count: number;\n\n  /** средняя цена */\n  average?: number;\n\n  /** ожидаемая (незафиксированная) прибыль или убыток */\n  expected?: number;\n\n  /** зафиксированная прибыль или убыток */\n  fixedPnL?: number;\n\n  /** текущая цена (последняя известная цена) */\n  lastPrice?: number;\n\n  /** дата последнего обновления цены */\n  lastPriceUpdated?: Date;\n\n  /** идентификатор портфеля */\n  portfolioId: string;\n\n  /** рассчитанная по сделкам средняя цена */\n  calculatedAverage?: number;\n\n  /** рассчитанное по сделкам количество */\n  calculatedCount?: number;\n\n  /** рассчитанная по сделкам ожидаемая прибыль*/\n  calculatedExpected?: number;\n\n  /** цена инструмента на момент окончания предыдущего дня */\n  previousDayPrice?: number;\n\n  /** список активных заявок */\n  orders: Order[];\n\n  /** true, если тикер находится в избранном */\n  isFavourite?: boolean;\n\n  constructor(portfolioId: string, item: PortfolioPosition) {\n    this.ticker = item.ticker || item.figi;\n    this.name = item.name;\n    this.figi = item.figi;\n    this.isin = item.isin || item.figi;\n    this.instrumentType = item.instrumentType;\n    this.currency = item.averagePositionPrice?.currency || item.expectedYield?.currency;\n    this.count = item.balance;\n    this.average = item.averagePositionPrice?.value;\n    this.expected = item.expectedYield?.value;\n    this.fixedPnL = undefined;\n    this.lastPrice =\n      item.expectedYield && item.averagePositionPrice\n        ? item.expectedYield?.value / item.balance + item.averagePositionPrice?.value\n        : undefined;\n    this.lastPriceUpdated = new Date();\n    this.portfolioId = portfolioId;\n    this.calculatedAverage = undefined;\n    this.calculatedCount = undefined;\n    this.calculatedExpected = undefined;\n    this.previousDayPrice = undefined;\n    this.orders = [];\n    this.isFavourite = false;\n  }\n  // #region Properties\n\n  get priceChange() {\n    return 0; // TODO: price change\n  }\n\n  get cost() {\n    return this.lastPrice != undefined ? this.lastPrice * this.count : undefined;\n  }\n\n  get expectedValue() {\n    if (this.instrumentType == 'Currency') {\n      return this.expected;\n    }\n    if (this.lastPrice && this.average) {\n      return (this.lastPrice - this.average) * (this.calculatedCount ?? this.count);\n    }\n    return this.expected;\n  }\n\n  get currencySymbol() {\n    return mapCurrency(this.currency);\n  }\n\n  // #endregion\n\n  // #region Print functions\n\n  printTitle(): string {\n    switch (this.instrumentType) {\n      case 'Bond':\n      case 'Currency':\n        return this.name;\n      case 'Etf':\n      case 'Stock':\n        return this.ticker;\n    }\n  }\n  printPrice(withCurrency: boolean = true): string {\n    return printMoney(this.lastPrice, withCurrency ? this.currencySymbol : '');\n  }\n  printPriceChange(): string {\n    return printMoney(this.priceChange, '%', true);\n  }\n  printAveragePrice(withCurrency: boolean = true): string {\n    return printMoney(this.average, withCurrency ? this.currencySymbol : '');\n  }\n  printQuantity(): string {\n    if (this.instrumentType == 'Currency') {\n      return printMoney(this.calculatedCount ?? this.count);\n    }\n    const quantity = this.calculatedCount ?? this.count;\n    return quantity.toFixed(0); // TODO: print quantity with suffix (for example 9.75К, 75.5K, 1.54M)\n  }\n  printCost(withCurrency: boolean = true): string {\n    return printMoney(this.cost, withCurrency ? this.currencySymbol : '');\n  }\n  printExpected(): string {\n    const expectedPercents = (100.0 * (this.expected ?? 0)) / (this.cost ?? 1);\n    return (\n      printMoney(this.expected, this.currencySymbol, true) +\n      ' (' +\n      printMoney(expectedPercents, '%') +\n      ')'\n    );\n  }\n  printFixedPnL(): string {\n    return printMoney(this.fixedPnL ?? 0, this.currencySymbol);\n  }\n\n  // #endregion\n}\n\n/**\n * Обновить позицию\n * @param {Position} position - позиция\n * @param {number} average - средняя цена\n * @param {number} fixedPnL - зафиксированную прибыль\n */\nexport function updatePosition(position: Position, average: number, fixedPnL: number) {\n  position.calculatedAverage = average || position.calculatedAverage;\n  position.fixedPnL = fixedPnL || position.fixedPnL;\n  position.calculatedExpected =\n    (position.lastPrice! - position.calculatedAverage!) * position.calculatedCount!;\n  console.log(\n    `Position ${position.ticker} updated (average: ${average?.toFixed(\n      2,\n    )}, fixedPnL: ${fixedPnL?.toFixed(2)})`,\n  );\n  window.dispatchEvent(new CustomEvent('PositionUpdated', { detail: { position } }));\n}\n","/* tslint:disable */\n/* eslint-disable */\n//----------------------\n// <auto-generated>\n//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)\n// </auto-generated>\n//----------------------\n// ReSharper disable InconsistentNaming\n\nexport interface ISandboxClient {\n    /**\n     * Регистрация клиента в sandbox\n     * @param body (optional) Запрос на создание счета и выставление баланса по валютным позициям\n     * @return Успешный ответ\n     */\n    register(body?: SandboxRegisterRequest | undefined): Promise<SandboxRegisterResponse>;\n    /**\n     * Выставление баланса по валютным позициям\n     * @param body Запрос на выставление баланса по валютным позициям\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    balance(body: SandboxSetCurrencyBalanceRequest, brokerAccountId?: string | undefined): Promise<Empty>;\n    /**\n     * Выставление баланса по инструментным позициям\n     * @param body Запрос на выставление баланса по инструментным позициям\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    balance2(body: SandboxSetPositionBalanceRequest, brokerAccountId?: string | undefined): Promise<Empty>;\n    /**\n     * Удаление счета\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    remove(brokerAccountId?: string | undefined): Promise<Empty>;\n    /**\n     * Удаление всех позиций\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    clear(brokerAccountId?: string | undefined): Promise<Empty>;\n}\n\nexport class SandboxClient implements ISandboxClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"https://api-invest.tinkoff.ru/openapi/\";\n    }\n\n    /**\n     * Регистрация клиента в sandbox\n     * @param body (optional) Запрос на создание счета и выставление баланса по валютным позициям\n     * @return Успешный ответ\n     */\n    register(body?: SandboxRegisterRequest | undefined, signal?: AbortSignal | undefined): Promise<SandboxRegisterResponse> {\n        let url_ = this.baseUrl + \"/sandbox/register\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(body);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processRegister(_response);\n        });\n    }\n\n    protected processRegister(response: Response): Promise<SandboxRegisterResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <SandboxRegisterResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<SandboxRegisterResponse>(<any>null);\n    }\n\n    /**\n     * Выставление баланса по валютным позициям\n     * @param body Запрос на выставление баланса по валютным позициям\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    balance(body: SandboxSetCurrencyBalanceRequest, brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<Empty> {\n        let url_ = this.baseUrl + \"/sandbox/currencies/balance?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(body);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processBalance(_response);\n        });\n    }\n\n    protected processBalance(response: Response): Promise<Empty> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <Empty>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<Empty>(<any>null);\n    }\n\n    /**\n     * Выставление баланса по инструментным позициям\n     * @param body Запрос на выставление баланса по инструментным позициям\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    balance2(body: SandboxSetPositionBalanceRequest, brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<Empty> {\n        let url_ = this.baseUrl + \"/sandbox/positions/balance?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(body);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processBalance2(_response);\n        });\n    }\n\n    protected processBalance2(response: Response): Promise<Empty> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <Empty>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<Empty>(<any>null);\n    }\n\n    /**\n     * Удаление счета\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    remove(brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<Empty> {\n        let url_ = this.baseUrl + \"/sandbox/remove?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processRemove(_response);\n        });\n    }\n\n    protected processRemove(response: Response): Promise<Empty> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <Empty>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<Empty>(<any>null);\n    }\n\n    /**\n     * Удаление всех позиций\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    clear(brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<Empty> {\n        let url_ = this.baseUrl + \"/sandbox/clear?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processClear(_response);\n        });\n    }\n\n    protected processClear(response: Response): Promise<Empty> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <Empty>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<Empty>(<any>null);\n    }\n}\n\nexport interface IOrdersClient {\n    /**\n     * Получение списка активных заявок\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Список заявок\n     */\n    orders(brokerAccountId?: string | undefined): Promise<OrdersResponse>;\n    /**\n     * Создание лимитной заявки\n     * @param figi FIGI инструмента\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Созданная заявка\n     */\n    limitOrder(figi: string, body: LimitOrderRequest, brokerAccountId?: string | undefined): Promise<LimitOrderResponse>;\n    /**\n     * Создание рыночной заявки\n     * @param figi FIGI инструмента\n     * @param brokerAccountId (optional) Уникальный идентификатор счета (по умолчанию - Тинькофф)\n     * @return Созданная заявка\n     */\n    marketOrder(figi: string, body: MarketOrderRequest, brokerAccountId?: string | undefined): Promise<MarketOrderResponse>;\n    /**\n     * Отмена заявки\n     * @param orderId ID заявки\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    cancel(orderId: string, brokerAccountId?: string | undefined): Promise<Empty>;\n}\n\nexport class OrdersClient implements IOrdersClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"https://api-invest.tinkoff.ru/openapi/\";\n    }\n\n    /**\n     * Получение списка активных заявок\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Список заявок\n     */\n    orders(brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<OrdersResponse> {\n        let url_ = this.baseUrl + \"/orders?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processOrders(_response);\n        });\n    }\n\n    protected processOrders(response: Response): Promise<OrdersResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <OrdersResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<OrdersResponse>(<any>null);\n    }\n\n    /**\n     * Создание лимитной заявки\n     * @param figi FIGI инструмента\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Созданная заявка\n     */\n    limitOrder(figi: string, body: LimitOrderRequest, brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<LimitOrderResponse> {\n        let url_ = this.baseUrl + \"/orders/limit-order?\";\n        if (figi === undefined || figi === null)\n            throw new Error(\"The parameter 'figi' must be defined and cannot be null.\");\n        else\n            url_ += \"figi=\" + encodeURIComponent(\"\" + figi) + \"&\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(body);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processLimitOrder(_response);\n        });\n    }\n\n    protected processLimitOrder(response: Response): Promise<LimitOrderResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <LimitOrderResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<LimitOrderResponse>(<any>null);\n    }\n\n    /**\n     * Создание рыночной заявки\n     * @param figi FIGI инструмента\n     * @param brokerAccountId (optional) Уникальный идентификатор счета (по умолчанию - Тинькофф)\n     * @return Созданная заявка\n     */\n    marketOrder(figi: string, body: MarketOrderRequest, brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<MarketOrderResponse> {\n        let url_ = this.baseUrl + \"/orders/market-order?\";\n        if (figi === undefined || figi === null)\n            throw new Error(\"The parameter 'figi' must be defined and cannot be null.\");\n        else\n            url_ += \"figi=\" + encodeURIComponent(\"\" + figi) + \"&\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(body);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processMarketOrder(_response);\n        });\n    }\n\n    protected processMarketOrder(response: Response): Promise<MarketOrderResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <MarketOrderResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<MarketOrderResponse>(<any>null);\n    }\n\n    /**\n     * Отмена заявки\n     * @param orderId ID заявки\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    cancel(orderId: string, brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<Empty> {\n        let url_ = this.baseUrl + \"/orders/cancel?\";\n        if (orderId === undefined || orderId === null)\n            throw new Error(\"The parameter 'orderId' must be defined and cannot be null.\");\n        else\n            url_ += \"orderId=\" + encodeURIComponent(\"\" + orderId) + \"&\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"POST\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processCancel(_response);\n        });\n    }\n\n    protected processCancel(response: Response): Promise<Empty> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <Empty>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u041e\\u0448\\u0438\\u0431\\u043a\\u0430 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<Empty>(<any>null);\n    }\n}\n\nexport interface IOperationsClient {\n    /**\n     * Получение списка операций\n     * @param from Начало временного промежутка\n     * @param to Конец временного промежутка\n     * @param figi (optional) Figi инструмента для фильтрации\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Список операций\n     */\n    operations(from: string, to: string, figi?: string | undefined, brokerAccountId?: string | undefined): Promise<OperationsResponse>;\n}\n\nexport class OperationsClient implements IOperationsClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"https://api-invest.tinkoff.ru/openapi/\";\n    }\n\n    /**\n     * Получение списка операций\n     * @param from Начало временного промежутка\n     * @param to Конец временного промежутка\n     * @param figi (optional) Figi инструмента для фильтрации\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Список операций\n     */\n    operations(from: string, to: string, figi?: string | undefined, brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<OperationsResponse> {\n        let url_ = this.baseUrl + \"/operations?\";\n        if (from === undefined || from === null)\n            throw new Error(\"The parameter 'from' must be defined and cannot be null.\");\n        else\n            url_ += \"from=\" + encodeURIComponent(\"\" + from) + \"&\";\n        if (to === undefined || to === null)\n            throw new Error(\"The parameter 'to' must be defined and cannot be null.\");\n        else\n            url_ += \"to=\" + encodeURIComponent(\"\" + to) + \"&\";\n        if (figi === null)\n            throw new Error(\"The parameter 'figi' cannot be null.\");\n        else if (figi !== undefined)\n            url_ += \"figi=\" + encodeURIComponent(\"\" + figi) + \"&\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processOperations(_response);\n        });\n    }\n\n    protected processOperations(response: Response): Promise<OperationsResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <OperationsResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0411\\u0440\\u043e\\u043a\\u0435\\u0440\\u0441\\u043a\\u0438\\u0439 \\u0441\\u0447\\u0435\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<OperationsResponse>(<any>null);\n    }\n}\n\nexport interface IPortfolioClient {\n    /**\n     * Получение портфеля клиента\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    portfolio(brokerAccountId?: string | undefined): Promise<PortfolioResponse>;\n    /**\n     * Получение валютных активов клиента\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    currencies(brokerAccountId?: string | undefined): Promise<PortfolioCurrenciesResponse>;\n}\n\nexport class PortfolioClient implements IPortfolioClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"https://api-invest.tinkoff.ru/openapi/\";\n    }\n\n    /**\n     * Получение портфеля клиента\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    portfolio(brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<PortfolioResponse> {\n        let url_ = this.baseUrl + \"/portfolio?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processPortfolio(_response);\n        });\n    }\n\n    protected processPortfolio(response: Response): Promise<PortfolioResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <PortfolioResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0411\\u0440\\u043e\\u043a\\u0435\\u0440\\u0441\\u043a\\u0438\\u0439 \\u0441\\u0447\\u0435\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<PortfolioResponse>(<any>null);\n    }\n\n    /**\n     * Получение валютных активов клиента\n     * @param brokerAccountId (optional) Номер счета (по умолчанию - Тинькофф)\n     * @return Успешный ответ\n     */\n    currencies(brokerAccountId?: string | undefined, signal?: AbortSignal | undefined): Promise<PortfolioCurrenciesResponse> {\n        let url_ = this.baseUrl + \"/portfolio/currencies?\";\n        if (brokerAccountId === null)\n            throw new Error(\"The parameter 'brokerAccountId' cannot be null.\");\n        else if (brokerAccountId !== undefined)\n            url_ += \"brokerAccountId=\" + encodeURIComponent(\"\" + brokerAccountId) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processCurrencies(_response);\n        });\n    }\n\n    protected processCurrencies(response: Response): Promise<PortfolioCurrenciesResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <PortfolioCurrenciesResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0411\\u0440\\u043e\\u043a\\u0435\\u0440\\u0441\\u043a\\u0438\\u0439 \\u0441\\u0447\\u0435\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<PortfolioCurrenciesResponse>(<any>null);\n    }\n}\n\nexport interface IUserClient {\n    /**\n     * Получение брокерских счетов клиента\n     * @return Успешный ответ\n     */\n    accounts(): Promise<UserAccountsResponse>;\n}\n\nexport class UserClient implements IUserClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"https://api-invest.tinkoff.ru/openapi/\";\n    }\n\n    /**\n     * Получение брокерских счетов клиента\n     * @return Успешный ответ\n     */\n    accounts(signal?: AbortSignal | undefined): Promise<UserAccountsResponse> {\n        let url_ = this.baseUrl + \"/user/accounts\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processAccounts(_response);\n        });\n    }\n\n    protected processAccounts(response: Response): Promise<UserAccountsResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <UserAccountsResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0411\\u0440\\u043e\\u043a\\u0435\\u0440\\u0441\\u043a\\u0438\\u0439 \\u0441\\u0447\\u0435\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<UserAccountsResponse>(<any>null);\n    }\n}\n\nexport interface IMarketClient {\n    /**\n     * Получение списка акций\n     * @return Успешный ответ\n     */\n    stocks(): Promise<MarketInstrumentListResponse>;\n    /**\n     * Получение списка облигаций\n     * @return Успешный ответ\n     */\n    bonds(): Promise<MarketInstrumentListResponse>;\n    /**\n     * Получение списка ETF\n     * @return Успешный ответ\n     */\n    etfs(): Promise<MarketInstrumentListResponse>;\n    /**\n     * Получение списка валютных пар\n     * @return Успешный ответ\n     */\n    currencies2(): Promise<MarketInstrumentListResponse>;\n    /**\n     * Получение стакана по FIGI\n     * @param figi FIGI\n     * @param depth Глубина стакана [1..20]\n     * @return Успешный ответ\n     */\n    orderbook(figi: string, depth: number): Promise<OrderbookResponse>;\n    /**\n     * Получение исторических свечей по FIGI\n     * @param figi FIGI\n     * @param from Начало временного промежутка\n     * @param to Конец временного промежутка\n     * @param interval Интервал свечи\n     * @return Успешный ответ\n     */\n    candles(figi: string, from: string, to: string, interval: CandleResolution): Promise<CandlesResponse>;\n    /**\n     * Получение инструмента по FIGI\n     * @param figi FIGI\n     * @return Успешный ответ\n     */\n    byFigi(figi: string): Promise<SearchMarketInstrumentResponse>;\n    /**\n     * Получение инструмента по тикеру\n     * @param ticker Тикер инструмента\n     * @return Успешный ответ\n     */\n    byTicker(ticker: string): Promise<MarketInstrumentListResponse>;\n}\n\nexport class MarketClient implements IMarketClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"https://api-invest.tinkoff.ru/openapi/\";\n    }\n\n    /**\n     * Получение списка акций\n     * @return Успешный ответ\n     */\n    stocks(signal?: AbortSignal | undefined): Promise<MarketInstrumentListResponse> {\n        let url_ = this.baseUrl + \"/market/stocks\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processStocks(_response);\n        });\n    }\n\n    protected processStocks(response: Response): Promise<MarketInstrumentListResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <MarketInstrumentListResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<MarketInstrumentListResponse>(<any>null);\n    }\n\n    /**\n     * Получение списка облигаций\n     * @return Успешный ответ\n     */\n    bonds(signal?: AbortSignal | undefined): Promise<MarketInstrumentListResponse> {\n        let url_ = this.baseUrl + \"/market/bonds\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processBonds(_response);\n        });\n    }\n\n    protected processBonds(response: Response): Promise<MarketInstrumentListResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <MarketInstrumentListResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<MarketInstrumentListResponse>(<any>null);\n    }\n\n    /**\n     * Получение списка ETF\n     * @return Успешный ответ\n     */\n    etfs(signal?: AbortSignal | undefined): Promise<MarketInstrumentListResponse> {\n        let url_ = this.baseUrl + \"/market/etfs\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processEtfs(_response);\n        });\n    }\n\n    protected processEtfs(response: Response): Promise<MarketInstrumentListResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <MarketInstrumentListResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<MarketInstrumentListResponse>(<any>null);\n    }\n\n    /**\n     * Получение списка валютных пар\n     * @return Успешный ответ\n     */\n    currencies2(signal?: AbortSignal | undefined): Promise<MarketInstrumentListResponse> {\n        let url_ = this.baseUrl + \"/market/currencies\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processCurrencies2(_response);\n        });\n    }\n\n    protected processCurrencies2(response: Response): Promise<MarketInstrumentListResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <MarketInstrumentListResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<MarketInstrumentListResponse>(<any>null);\n    }\n\n    /**\n     * Получение стакана по FIGI\n     * @param figi FIGI\n     * @param depth Глубина стакана [1..20]\n     * @return Успешный ответ\n     */\n    orderbook(figi: string, depth: number, signal?: AbortSignal | undefined): Promise<OrderbookResponse> {\n        let url_ = this.baseUrl + \"/market/orderbook?\";\n        if (figi === undefined || figi === null)\n            throw new Error(\"The parameter 'figi' must be defined and cannot be null.\");\n        else\n            url_ += \"figi=\" + encodeURIComponent(\"\" + figi) + \"&\";\n        if (depth === undefined || depth === null)\n            throw new Error(\"The parameter 'depth' must be defined and cannot be null.\");\n        else\n            url_ += \"depth=\" + encodeURIComponent(\"\" + depth) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processOrderbook(_response);\n        });\n    }\n\n    protected processOrderbook(response: Response): Promise<OrderbookResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <OrderbookResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<OrderbookResponse>(<any>null);\n    }\n\n    /**\n     * Получение исторических свечей по FIGI\n     * @param figi FIGI\n     * @param from Начало временного промежутка\n     * @param to Конец временного промежутка\n     * @param interval Интервал свечи\n     * @return Успешный ответ\n     */\n    candles(figi: string, from: string, to: string, interval: CandleResolution, signal?: AbortSignal | undefined): Promise<CandlesResponse> {\n        let url_ = this.baseUrl + \"/market/candles?\";\n        if (figi === undefined || figi === null)\n            throw new Error(\"The parameter 'figi' must be defined and cannot be null.\");\n        else\n            url_ += \"figi=\" + encodeURIComponent(\"\" + figi) + \"&\";\n        if (from === undefined || from === null)\n            throw new Error(\"The parameter 'from' must be defined and cannot be null.\");\n        else\n            url_ += \"from=\" + encodeURIComponent(\"\" + from) + \"&\";\n        if (to === undefined || to === null)\n            throw new Error(\"The parameter 'to' must be defined and cannot be null.\");\n        else\n            url_ += \"to=\" + encodeURIComponent(\"\" + to) + \"&\";\n        if (interval === undefined || interval === null)\n            throw new Error(\"The parameter 'interval' must be defined and cannot be null.\");\n        else\n            url_ += \"interval=\" + encodeURIComponent(\"\" + interval) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processCandles(_response);\n        });\n    }\n\n    protected processCandles(response: Response): Promise<CandlesResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <CandlesResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<CandlesResponse>(<any>null);\n    }\n\n    /**\n     * Получение инструмента по FIGI\n     * @param figi FIGI\n     * @return Успешный ответ\n     */\n    byFigi(figi: string, signal?: AbortSignal | undefined): Promise<SearchMarketInstrumentResponse> {\n        let url_ = this.baseUrl + \"/market/search/by-figi?\";\n        if (figi === undefined || figi === null)\n            throw new Error(\"The parameter 'figi' must be defined and cannot be null.\");\n        else\n            url_ += \"figi=\" + encodeURIComponent(\"\" + figi) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processByFigi(_response);\n        });\n    }\n\n    protected processByFigi(response: Response): Promise<SearchMarketInstrumentResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <SearchMarketInstrumentResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<SearchMarketInstrumentResponse>(<any>null);\n    }\n\n    /**\n     * Получение инструмента по тикеру\n     * @param ticker Тикер инструмента\n     * @return Успешный ответ\n     */\n    byTicker(ticker: string, signal?: AbortSignal | undefined): Promise<MarketInstrumentListResponse> {\n        let url_ = this.baseUrl + \"/market/search/by-ticker?\";\n        if (ticker === undefined || ticker === null)\n            throw new Error(\"The parameter 'ticker' must be defined and cannot be null.\");\n        else\n            url_ += \"ticker=\" + encodeURIComponent(\"\" + ticker) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            signal,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processByTicker(_response);\n        });\n    }\n\n    protected processByTicker(response: Response): Promise<MarketInstrumentListResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            result200 = _responseText === \"\" ? null : <MarketInstrumentListResponse>JSON.parse(_responseText, this.jsonParseReviver);\n            return result200;\n            });\n        } else if (status === 500) {\n            return response.text().then((_responseText) => {\n            let result500: any = null;\n            result500 = _responseText === \"\" ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver);\n            return throwException(\"\\u0418\\u043d\\u0441\\u0442\\u0440\\u0443\\u043c\\u0435\\u043d\\u0442 \\u043d\\u0435 \\u043d\\u0430\\u0439\\u0434\\u0435\\u043d\", status, _responseText, _headers, result500);\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<MarketInstrumentListResponse>(<any>null);\n    }\n}\n\nexport interface Empty {\n    trackingId: string;\n    payload: any;\n    status: string;\n}\n\nexport interface ErrorDto {\n    trackingId: string;\n    status: string;\n    payload: Payload;\n}\n\nexport interface PortfolioResponse {\n    trackingId: string;\n    status: string;\n    payload: Portfolio;\n}\n\nexport interface Portfolio {\n    positions: PortfolioPosition[];\n}\n\nexport interface UserAccountsResponse {\n    trackingId: string;\n    status: string;\n    payload: UserAccounts;\n}\n\nexport interface UserAccounts {\n    accounts: UserAccount[];\n}\n\nexport interface UserAccount {\n    brokerAccountType: BrokerAccountType;\n    brokerAccountId: string;\n}\n\nexport interface PortfolioCurrenciesResponse {\n    trackingId: string;\n    status: string;\n    payload: Currencies;\n}\n\nexport interface Currencies {\n    currencies: CurrencyPosition[];\n}\n\nexport interface CurrencyPosition {\n    currency: Currency;\n    balance: number;\n    blocked?: number;\n}\n\nexport interface PortfolioPosition {\n    figi: string;\n    ticker?: string;\n    isin?: string;\n    instrumentType: InstrumentType;\n    balance: number;\n    blocked?: number;\n    expectedYield?: MoneyAmount;\n    lots: number;\n    averagePositionPrice?: MoneyAmount;\n    averagePositionPriceNoNkd?: MoneyAmount;\n    name: string;\n}\n\nexport interface MoneyAmount {\n    currency: Currency;\n    value: number;\n}\n\nexport interface OrderbookResponse {\n    trackingId: string;\n    status: string;\n    payload: Orderbook;\n}\n\nexport interface Orderbook {\n    figi: string;\n    depth: number;\n    bids: OrderResponse[];\n    asks: OrderResponse[];\n    tradeStatus: TradeStatus;\n    /** Шаг цены */\n    minPriceIncrement: number;\n    /** Номинал для облигаций */\n    faceValue?: number;\n    lastPrice?: number;\n    closePrice?: number;\n    /** Верхняя граница цены */\n    limitUp?: number;\n    /** Нижняя граница цены */\n    limitDown?: number;\n}\n\nexport interface OrderResponse {\n    price: number;\n    quantity: number;\n}\n\nexport interface CandlesResponse {\n    trackingId: string;\n    status: string;\n    payload: Candles;\n}\n\nexport interface Candles {\n    figi: string;\n    interval: CandleResolution;\n    candles: Candle[];\n}\n\nexport interface Candle {\n    figi: string;\n    interval: CandleResolution;\n    o: number;\n    c: number;\n    h: number;\n    l: number;\n    v: number;\n    /** ISO8601 */\n    time: string;\n}\n\nexport interface OperationsResponse {\n    trackingId: string;\n    status: string;\n    payload: Operations;\n}\n\nexport interface Operations {\n    operations: Operation[];\n}\n\nexport interface OperationTrade {\n    tradeId: string;\n    /** ISO8601 */\n    date: string;\n    price: number;\n    quantity: number;\n}\n\nexport interface Operation {\n    id: string;\n    status: OperationStatus;\n    trades?: OperationTrade[];\n    commission?: MoneyAmount;\n    currency: Currency;\n    payment: number;\n    price?: number;\n    /** Число инструментов в выставленной заявке */\n    quantity?: number;\n    /** Число инструментов, исполненных в заявке */\n    quantityExecuted?: number;\n    figi?: string;\n    instrumentType?: InstrumentType;\n    isMarginCall: boolean;\n    /** ISO8601 */\n    date: string;\n    operationType?: OperationTypeWithCommission;\n}\n\nexport interface OrdersResponse {\n    trackingId: string;\n    status: string;\n    payload: Order[];\n}\n\nexport interface Order {\n    orderId: string;\n    figi: string;\n    operation: OperationType;\n    status: OrderStatus;\n    requestedLots: number;\n    executedLots: number;\n    type: OrderType;\n    price: number;\n}\n\nexport interface LimitOrderRequest {\n    lots: number;\n    operation: OperationType;\n    price: number;\n}\n\nexport interface LimitOrderResponse {\n    trackingId: string;\n    status: string;\n    payload: PlacedLimitOrder;\n}\n\nexport interface PlacedLimitOrder {\n    orderId: string;\n    operation: OperationType;\n    status: OrderStatus;\n    rejectReason?: string;\n    /** Сообщение об ошибке */\n    message?: string;\n    requestedLots: number;\n    executedLots: number;\n    commission?: MoneyAmount;\n}\n\nexport interface MarketOrderRequest {\n    lots: number;\n    operation: OperationType;\n}\n\nexport interface MarketOrderResponse {\n    trackingId: string;\n    status: string;\n    payload: PlacedMarketOrder;\n}\n\nexport interface PlacedMarketOrder {\n    orderId: string;\n    operation: OperationType;\n    status: OrderStatus;\n    rejectReason?: string;\n    /** Сообщение об ошибке */\n    message?: string;\n    requestedLots: number;\n    executedLots: number;\n    commission?: MoneyAmount;\n}\n\nexport type TradeStatus = \"NormalTrading\" | \"NotAvailableForTrading\";\n\nexport type OperationType = \"Buy\" | \"Sell\";\n\nexport type OperationTypeWithCommission = \"Buy\" | \"BuyCard\" | \"Sell\" | \"BrokerCommission\" | \"ExchangeCommission\" | \"ServiceCommission\" | \"MarginCommission\" | \"OtherCommission\" | \"PayIn\" | \"PayOut\" | \"Tax\" | \"TaxLucre\" | \"TaxDividend\" | \"TaxCoupon\" | \"TaxBack\" | \"Repayment\" | \"PartRepayment\" | \"Coupon\" | \"Dividend\" | \"SecurityIn\" | \"SecurityOut\";\n\n/** Статус заявки */\nexport type OperationStatus = \"Done\" | \"Decline\" | \"Progress\";\n\n/** Интервал свечи и допустимый промежуток запроса: - 1min [1 minute, 1 day] - 2min [2 minutes, 1 day] - 3min [3 minutes, 1 day] - 5min [5 minutes, 1 day] - 10min [10 minutes, 1 day] - 15min [15 minutes, 1 day] - 30min [30 minutes, 1 day] - hour [1 hour, 7 days] - day [1 day, 1 year] - week [7 days, 2 years] - month [1 month, 10 years] */\nexport type CandleResolution = \"1min\" | \"2min\" | \"3min\" | \"5min\" | \"10min\" | \"15min\" | \"30min\" | \"hour\" | \"day\" | \"week\" | \"month\";\n\n/** Статус заявки */\nexport type OrderStatus = \"New\" | \"PartiallyFill\" | \"Fill\" | \"Cancelled\" | \"Replaced\" | \"PendingCancel\" | \"Rejected\" | \"PendingReplace\" | \"PendingNew\";\n\n/** Тип заявки */\nexport type OrderType = \"Limit\" | \"Market\";\n\nexport interface SandboxRegisterRequest {\n    brokerAccountType?: BrokerAccountType;\n}\n\nexport interface SandboxRegisterResponse {\n    trackingId: string;\n    status: string;\n    payload: SandboxAccount;\n}\n\nexport interface SandboxAccount {\n    brokerAccountType: BrokerAccountType;\n    brokerAccountId: string;\n}\n\nexport interface SandboxSetCurrencyBalanceRequest {\n    currency: SandboxCurrency;\n    balance: number;\n}\n\nexport interface SandboxSetPositionBalanceRequest {\n    figi?: string;\n    balance: number;\n}\n\nexport interface MarketInstrumentListResponse {\n    trackingId: string;\n    status: string;\n    payload: MarketInstrumentList;\n}\n\nexport interface MarketInstrumentList {\n    total: number;\n    instruments: MarketInstrument[];\n}\n\nexport interface SearchMarketInstrumentResponse {\n    trackingId: string;\n    status: string;\n    payload: SearchMarketInstrument;\n}\n\nexport interface MarketInstrumentResponse {\n    trackingId: string;\n    status: string;\n    payload: MarketInstrument;\n}\n\nexport interface SearchMarketInstrument {\n    figi: string;\n    ticker: string;\n    isin?: string;\n    /** Шаг цены */\n    minPriceIncrement?: number;\n    lot: number;\n    currency?: Currency;\n    name: string;\n    type: InstrumentType;\n}\n\nexport interface MarketInstrument {\n    figi: string;\n    ticker: string;\n    isin?: string;\n    /** Шаг цены */\n    minPriceIncrement?: number;\n    lot: number;\n    /** Минимальное число инструментов для покупки должно быть не меньше, чем размер лота х количество лотов */\n    minQuantity?: number;\n    currency?: Currency;\n    name: string;\n    type: InstrumentType;\n}\n\nexport type SandboxCurrency = \"RUB\" | \"USD\" | \"EUR\" | \"GBP\" | \"HKD\" | \"CHF\" | \"JPY\" | \"CNY\" | \"TRY\";\n\nexport type Currency = \"RUB\" | \"USD\" | \"EUR\" | \"GBP\" | \"HKD\" | \"CHF\" | \"JPY\" | \"CNY\" | \"TRY\";\n\nexport type InstrumentType = \"Stock\" | \"Currency\" | \"Bond\" | \"Etf\";\n\nexport type BrokerAccountType = \"Tinkoff\" | \"TinkoffIis\";\n\nexport interface Payload {\n    message?: string;\n    code?: string;\n}\n\nexport class ApiException extends Error {\n    message: string;\n    status: number;\n    response: string;\n    headers: { [key: string]: any; };\n    result: any;\n\n    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\n        super();\n\n        this.message = message;\n        this.status = status;\n        this.response = response;\n        this.headers = headers;\n        this.result = result;\n    }\n\n    protected isApiException = true;\n\n    static isApiException(obj: any): obj is ApiException {\n        return obj.isApiException === true;\n    }\n}\n\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {\n    if (result !== null && result !== undefined)\n        throw result;\n    else\n        throw new ApiException(message, status, response, headers, null);\n}","export function getApiEndpoint() {\n  return process.env.REACT_APP_API_URL;\n}\n\nconst getAllMethods = (instance: any, cls: any) => {\n  return Object.getOwnPropertyNames(Object.getPrototypeOf(instance)).filter((name) => {\n    let method = instance[name];\n    return !(!(method instanceof Function) || method === cls);\n  });\n};\n\n/**\n * Bind this for all methods in ES6 classes\n * https://gist.github.com/anhldbk/782e13de7f79b07e556a029a9ce49fa3\n */\nexport const binder = <T>(instance: T, cls: any) => {\n  getAllMethods(instance, cls).forEach((mtd) => {\n    (instance as any)[mtd] = (instance as any)[mtd].bind(instance);\n  });\n\n  return instance;\n};\n\n// https://stackoverflow.com/a/49857905/8439123\nexport function fetchWithTimeout(url: RequestInfo, options?: RequestInit, timeout = 15000) {\n  return Promise.race([\n    fetch(url, options),\n    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), timeout)),\n  ]);\n}\n","import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport function useStorage() {\n  const storeData = async (key: string, value: any) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(key, jsonValue);\n    } catch (e) {\n      // saving error\n    }\n  };\n  const getData = async (key: string) => {\n    try {\n      const jsonValue = await AsyncStorage.getItem(key);\n      return jsonValue != null ? JSON.parse(jsonValue) : null;\n    } catch (e) {\n      // error reading value\n    }\n  };\n  return {\n    storeData,\n    getData,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useStorage } from './useStorage';\nimport { UserAccount } from '/api/client';\n\nexport type ISettings = {\n  token?: string;\n  account?: UserAccount;\n};\n\nconst defaultSettings: ISettings = {};\n\nexport const settingsStorageKey = '@TTE_Settings';\n\nexport function useSettings() {\n  const [settings, setSettings] = useState<ISettings>(defaultSettings);\n\n  const { getData, storeData } = useStorage();\n\n  useEffect(() => {\n    getData(settingsStorageKey).then((data) => {\n      if (data != null) {\n        setSettings(data);\n      }\n    });\n  }, []);\n\n  return {\n    settings,\n    setSettings: (data: Partial<ISettings>) => {\n      const merged = { ...settings, ...data };\n      setSettings(merged);\n      storeData(settingsStorageKey, merged);\n    },\n    resetSettings: () => {\n      setSettings(defaultSettings);\n      storeData(settingsStorageKey, defaultSettings);\n    },\n  };\n}\n","import {\n  MarketClient,\n  OperationsClient,\n  OrdersClient,\n  PortfolioClient,\n  UserClient,\n} from './client';\nimport { binder, fetchWithTimeout, getApiEndpoint } from './utils';\nimport { ISettings, settingsStorageKey } from '/hooks/useSettings';\nimport { useStorage } from '/hooks/useStorage';\n\nconst client = {\n  fetch: async (url: RequestInfo, init?: RequestInit) => {\n    const { getData } = useStorage();\n    if (init !== undefined) {\n      const settings = (await getData(settingsStorageKey)) as ISettings;\n      const authToken = settings?.token;\n      if (authToken) {\n        init.headers = {\n          ...(init.headers ?? {}),\n          Authorization: `Bearer ${authToken}`,\n        };\n      }\n    }\n\n    return fetchWithTimeout(url, init) as Promise<Response>;\n  },\n};\n\nconst apiEndpoint = 'https://api-invest.tinkoff.ru/openapi';\n\nexport const ordersClient = binder(new OrdersClient(apiEndpoint, client), OrdersClient);\nexport const marketClient = binder(new MarketClient(apiEndpoint, client), MarketClient);\nexport const portfolioClient = binder(new PortfolioClient(apiEndpoint, client), PortfolioClient);\nexport const operationsClient = binder(new OperationsClient(apiEndpoint, client), OperationsClient);\nexport const userClient = binder(new UserClient(apiEndpoint, client), UserClient);\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\nimport Colors from '/constants/Colors';\nimport useColorScheme from '/hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark,\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { ISettingsItemProps } from './SettingsItem';\nimport { Text, View } from '/components/Themed';\n\ntype ISettingsGroupProps = {\n  title: string;\n  children?: React.ReactNode;\n};\n\nexport default function SettingsGroup({ title, children }: ISettingsGroupProps) {\n  const items = React.Children.map(children, (child, index) =>\n    React.cloneElement(\n      child as React.ReactElement,\n      {\n        isFirst: index == 0,\n        isLast: !Array.isArray(children) || index == children.length - 1,\n      } as ISettingsItemProps,\n    ),\n  );\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <View style={styles.group}>{items}</View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n  },\n  title: {\n    opacity: 0.4,\n    marginBottom: 10,\n    textTransform: 'uppercase',\n    fontSize: 12,\n  },\n  group: {\n    borderRadius: 10,\n  },\n});\n","import { Position } from '/models/position';\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { SectionList, StyleSheet, TouchableHighlight } from 'react-native';\nimport { InstrumentType, PortfolioPosition, PortfolioResponse } from '/api/client';\nimport { portfolioClient } from '/api/httpClient';\nimport useApi from '/api/useApi';\nimport SettingsGroup from '/components/Settings/SettingsGroup';\nimport { Text, View } from '/components/Themed';\nimport { useSettings } from '/hooks/useSettings';\n\nexport default function PortfolioScreen() {\n  const { settings } = useSettings();\n\n  const { loading, data, fetch } = useApi({\n    initial: {} as PortfolioResponse,\n    fetchData: portfolioClient.portfolio,\n  });\n\n  useEffect(() => {\n    if (settings) {\n      fetch(settings.account?.brokerAccountId);\n    }\n  }, [fetch, settings]);\n\n  const positionsByType = data?.payload?.positions.reduce((result, item) => {\n    (result[item.instrumentType] = result[item.instrumentType] || []).push(item);\n    return result;\n  }, {} as { [key in InstrumentType]: PortfolioPosition[] });\n\n  const groups = Object.entries(positionsByType ?? {}).map(([type, positions]) => ({\n    title: type,\n    data: positions.map((position) => new Position('TODO_portfolioID', position)),\n  }));\n\n  return (\n    <SectionList\n      sections={groups}\n      keyExtractor={(item: Position) => item.figi}\n      renderItem={({ item, separators }) => {\n        return (\n          <TouchableHighlight\n            key={item.figi}\n            onPress={() => {}}\n            onShowUnderlay={separators.highlight}\n            onHideUnderlay={separators.unhighlight}\n          >\n            <View style={styles.listItem}>\n              <View style={styles.itemImage}>\n                <Text style={styles.itemImageLetter}>{item.ticker?.slice(0, 1)}</Text>\n              </View>\n              <View style={styles.itemInfo}>\n                <View>\n                  <Text>{item.printTitle()}</Text>\n                  <Text>{`${item.printQuantity()} • ${item.printAveragePrice(\n                    false,\n                  )} → ${item.printPrice()}`}</Text>\n                </View>\n                <View style={styles.itemRight}>\n                  <Text>{item.printCost()}</Text>\n                  <Text>{item.printExpected()}</Text>\n                </View>\n              </View>\n            </View>\n          </TouchableHighlight>\n        );\n      }}\n      ItemSeparatorComponent={() => <View style={styles.separator} />}\n      renderSectionHeader={({ section: { title } }) => <SettingsGroup title={title} />}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {},\n  listItem: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n  },\n  itemImage: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: 'blue',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  itemImageLetter: {\n    color: 'white',\n    fontSize: 18,\n  },\n  itemInfo: {\n    marginLeft: 10,\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  itemRight: {\n    display: 'flex',\n    alignItems: 'flex-end',\n  },\n  separator: {\n    backgroundColor: 'lightgray',\n    height: 1,\n  },\n});\n","import { useState, useCallback, Dispatch, SetStateAction, useRef } from 'react';\n\ntype IUseApiProps<TResponse, TParams extends any[]> = {\n  initialLoading?: boolean;\n  initial: TResponse;\n  fetchData: (...params: TParams) => Promise<TResponse>;\n};\n\nexport default function useApi<TResponse, TParams extends any[]>({\n  initial,\n  fetchData,\n  initialLoading = true,\n}: IUseApiProps<TResponse, TParams>) {\n  const initialRef = useRef(initial);\n  const [state, setState] = useState(initial);\n  const firstFetch = useRef(false);\n  const [loading, setLoading] = useState(0);\n  const [error, setError] = useState<any>(null);\n\n  const fetch = useCallback(\n    (...params: Parameters<typeof fetchData>) => {\n      firstFetch.current = true;\n      setLoading((l) => l + 1);\n      setError(null);\n\n      return fetchData(...params)\n        .then(\n          (resp) => {\n            setState(resp);\n            return resp;\n          },\n          (e) => {\n            setError(e);\n            throw e;\n          },\n        )\n        .finally(() => {\n          setLoading((l) => l - 1);\n        });\n    },\n    [fetchData],\n  );\n\n  const fetchMore = useCallback(\n    (\n        handlePromise: (\n          promise: Promise<TResponse>,\n          setState: Dispatch<SetStateAction<TResponse>>,\n          setError: Dispatch<SetStateAction<null>>,\n        ) => Promise<TResponse>,\n      ) =>\n      (...params: Parameters<typeof fetchData>) => {\n        setLoading((l) => l + 1);\n        setError(null);\n        handlePromise(fetchData(...params), setState, setError).finally(() =>\n          setLoading((l) => l - 1),\n        );\n      },\n    [fetchData],\n  );\n\n  const resetData = useCallback(() => {\n    setState(initialRef.current);\n    setError(null);\n  }, []);\n\n  return {\n    data: state,\n    loading: firstFetch.current ? loading > 0 : initialLoading,\n    firstFetchDone: firstFetch.current,\n    error,\n    fetch,\n    fetchMore,\n    resetData,\n    setData: setState,\n  };\n}\n","import { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { useEffect, useState } from 'react';\nimport { ListRenderItem, StyleSheet, TouchableHighlight } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { TabSettingsParamList } from 'types';\nimport { UserAccount } from '/api/client';\nimport { userClient } from '/api/httpClient';\nimport { Text, View } from '/components/Themed';\nimport { useSettings } from '/hooks/useSettings';\n\ntype NavigationProp = StackNavigationProp<TabSettingsParamList, 'SettingsScreen'>;\n\nexport default function SelectAccountScreen() {\n  const { navigate } = useNavigation<NavigationProp>();\n  const { settings, setSettings } = useSettings();\n  const [accounts, setAccounts] = useState<UserAccount[]>([]);\n\n  useEffect(() => {\n    if (settings.token) {\n      userClient\n        .accounts()\n        .then((response) => {\n          setAccounts(response.payload.accounts);\n        })\n        .catch((e) => console.log(e));\n    }\n  }, [settings.token]);\n\n  const selectAccount = (account: UserAccount) => {\n    setSettings({ account: account });\n    navigate('SettingsScreen');\n  };\n\n  return (\n    <FlatList\n      data={accounts}\n      keyExtractor={(item: UserAccount) => item.brokerAccountId}\n      ItemSeparatorComponent={() => <View style={styles.separator} />}\n      renderItem={\n        (({ item, separators }) => (\n          <TouchableHighlight\n            key={item.brokerAccountId}\n            onPress={() => selectAccount(item)}\n            onShowUnderlay={separators.highlight}\n            onHideUnderlay={separators.unhighlight}\n          >\n            <View>\n              <Text style={styles.listItem}>\n                {item.brokerAccountType} {item.brokerAccountId}\n              </Text>\n            </View>\n          </TouchableHighlight>\n        )) as ListRenderItem<UserAccount>\n      }\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  separator: {\n    height: 1,\n    backgroundColor: 'lightGray',\n  },\n  listItem: {\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n  },\n});\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { View } from '/components/Themed';\n\nexport type ISettingsItemProps = {\n  children?: React.ReactNode;\n  isFirst?: boolean;\n  isLast?: boolean;\n};\n\nexport default function SettingsItem({ children, isFirst, isLast }: ISettingsItemProps) {\n  const clone = React.cloneElement(children as React.ReactElement, {\n    style: [\n      {\n        paddingHorizontal: 15,\n        paddingVertical: 10,\n      },\n      (children as React.ReactElement)?.props?.style,\n    ],\n  });\n  return (\n    <>\n      {clone}\n      {!isLast && <View style={styles.divider} />}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  divider: {\n    height: 1,\n    width: '100%',\n    opacity: 0.15,\n    backgroundColor: 'gray',\n  },\n});\n","import { Link, useNavigation } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { ScrollView, TextInput } from 'react-native-gesture-handler';\nimport SettingsGroup from '/components/Settings/SettingsGroup';\nimport SettingsItem from '/components/Settings/SettingsItem';\nimport { Text } from '/components/Themed';\nimport { useSettings } from '/hooks/useSettings';\n\nexport default function SettingsScreen() {\n  const { settings, setSettings } = useSettings();\n\n  return (\n    <ScrollView>\n      <SettingsGroup title=\"Security\">\n        <SettingsItem>\n          <TextInput\n            placeholder=\"Token\"\n            style={styles.textInput}\n            value={settings.token ?? ''}\n            onChangeText={(value) => setSettings({ token: value })}\n          />\n        </SettingsItem>\n      </SettingsGroup>\n      <SettingsGroup title=\"Portfolio\">\n        <SettingsItem>\n          <Link to={{ screen: 'SelectAccountScreen' }}>\n            {settings.account\n              ? `${settings.account.brokerAccountType} ${settings.account.brokerAccountId}`\n              : 'Select account'}\n          </Link>\n        </SettingsItem>\n      </SettingsGroup>\n      <SettingsGroup title=\"Positions\">\n        <SettingsItem>\n          <Text>TODO</Text>\n        </SettingsItem>\n        <SettingsItem>\n          <Text>TODO</Text>\n        </SettingsItem>\n        <SettingsItem>\n          <Text>TODO</Text>\n        </SettingsItem>\n      </SettingsGroup>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    borderRadius: 10,\n    outlineStyle: 'none',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { BottomTabParamList, TabPortfolioParamList, TabSettingsParamList } from '../types';\nimport Colors from '/constants/Colors';\nimport useColorScheme from '/hooks/useColorScheme';\nimport PortfolioScreen from '/screens/PortfolioScreen';\nimport SelectAccountScreen from '/screens/SelectAccountScreen';\nimport SettingsScreen from '/screens/SettingsScreen';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Settings\"\n      screenOptions={{ headerShown: false, tabBarActiveTintColor: Colors[colorScheme].tint }}\n    >\n      <BottomTab.Screen\n        name=\"Portfolio\"\n        component={TabPortfolioNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"list-outline\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Settings\"\n        component={TabSettingsNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"settings-outline\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabPortfolioStack = createStackNavigator<TabPortfolioParamList>();\n\nfunction TabPortfolioNavigator() {\n  return (\n    <TabPortfolioStack.Navigator>\n      <TabPortfolioStack.Screen\n        name=\"PortfolioScreen\"\n        component={PortfolioScreen}\n        options={{ headerTitle: 'Portfolio' }}\n      />\n    </TabPortfolioStack.Navigator>\n  );\n}\n\nconst TabSettingsStack = createStackNavigator<TabSettingsParamList>();\n\nfunction TabSettingsNavigator() {\n  return (\n    <TabSettingsStack.Navigator>\n      <TabSettingsStack.Screen\n        name=\"SettingsScreen\"\n        component={SettingsScreen}\n        options={{ headerTitle: 'Settings' }}\n      />\n      <TabSettingsStack.Screen\n        name=\"SelectAccountScreen\"\n        component={SelectAccountScreen}\n        options={{ headerTitle: 'Select account' }}\n      />\n    </TabSettingsStack.Navigator>\n  );\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          Portfolio: {\n            screens: {\n              PortfolioScreen: 'portfolio',\n            },\n          },\n          Settings: {\n            screens: {\n              SettingsScreen: 'settings',\n              SelectAccountScreen: 'settings/account',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}